// Using Dr Racket/Scheme
// Show that sum and product (Exercise 1.31) are both special cases of a still more general notion called accumulate
// that combines a collection of terms, using some general accumulation function:
// (accumulate combiner null-value term a next b)

// Write accumulate and show how sum and
// product can both be defined as simple calls to accumulate

// Accumulate

(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a) (accumulate combiner null-value term (next a) next b))
      )
  )
  
// Sum

(define (sum-combiner a b)
  (+ a b)
  )

(define (sum-term a)
  a
  )

(define (sum-next a)
  (+ a 1)
  )

(define (sum-int a b)
  (accumulate sum-combiner 0 sum-term a sum-next b)
  )
  
  // Product
  
  (define (prod-combiner a b)
  (* a b)
  )

(define (prod-term a)
  a
  )

(define (prod-next a)
  (+ a 1)
  )

(define (product a b)
  (accumulate prod-combiner 1 prod-term a prod-next b)
  )
